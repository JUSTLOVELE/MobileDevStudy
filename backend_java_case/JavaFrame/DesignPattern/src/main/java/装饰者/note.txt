类应该对扩展开放,对修改关闭
装饰者模式：动态的将责任附加到对象上,若要扩展功能,装饰者提供了比继承更有弹性的替代方案
  装饰者和被装饰者对象有着相同的超类型
  可以用一个或多个装饰者包装一个对象(利用继承来获得相同的类型,而不是获得行为)
  既然装饰者和被装饰者有相同的超类型,所以在任何需要原始对象的场合,可以用装饰过的对象代替它
  装饰者可以在所委托被装饰者的行为之前与/或之后,加上自己的行为,以达到特定的目的
  对象可以在任何时候被装饰,所以可以在运行时动态的,不限量的用你喜欢的装饰者来装饰对象
  