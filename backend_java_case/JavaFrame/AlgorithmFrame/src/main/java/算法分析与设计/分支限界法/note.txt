分支限界是找出满足约束条件的一个解,或是在满足约束条件的解中找出在某种意义下的最优解,分支限界以广度优先或以最小耗费优先的方式搜索解空间树

与回溯法的区别:
1.回溯法的求解目标是找出解空间树中满足约束条件的所有借,而分支限界的求解目标则是找出满足约束条件的一个解,或是在满足约束条件
的解中找出某种意义下额最优解
2.搜索方式不同:回溯法以深度优先的方式搜索解空间树,而分支限界法则以广度优先或以最小耗费优先的方式搜索解空间树
在分支限界法中,每一个活节点只有一次机会称为扩展节点,活节点一旦称为扩展节点,就一次性产生其所有儿子节点,在这些儿子节点中,
导致不可行解或导致非最优解的儿子节点被舍弃,其余儿子节点被加入活节点表中
 此后从活节点表中取下一节点称为当前扩展节点,并重复,知道找到需要解
 常见两种分支限界: 
  1.队列式
  2.优先队列式
  分支限界法对问题的解空间树中节点的处理是跳跃式的,回溯也不是单纯的沿着双亲节点一层一层向上回溯,因此,当搜索到某个叶子节点且该叶子节点的
目标函数值在活节点表中最大时(假设求解最大化问题),求得了问题的最优解,但是,却无法求得该叶子节点对应的最优解中的各个分量,这个问题可以用下列的两个方法解决:
1.对每个扩展节点保存该节点到根节点的路径
2.在搜索过程中构建搜索经过的树结构,在求得最优解时,从叶子节点不断回溯到根节点,以确定最优解中的各个分量

  分支限界法和回溯法实际上都属于穷举法,与回溯法不同的是:分支限界法首先扩展解空间树中的上层节点,并采用限界函数,有利于实行大范围剪枝,
同时,根据限界函数不断调整搜索方向,选择最有可能取得最优解的子树优先进行搜索,所以如果选择了节点的合理扩展顺序以及设计了一个好的限界函数,
分支界限法可以快速得到问题的解

    分支限界法的较高效率是以付出一定代价为基础的,其工作方式也造成了算法设计的复杂性,首先,一个更好的限界函数通常需要花费更多的时间计算响应的目标函数值,而且
对于具体的问题实例,通常需要进行大量的实验,才能确定一个好的限界函数;其次,由于分支限界法对解空间树中节点的处理是跳跃式的,因此在搜索到某个叶子节点得到最优值
时,为了从该叶子节点求出对应的最优解的各个分量,需要对每个扩展节点保存该节点到根节点的路径,或者在搜索过程中构建搜索经过的树结构,这使得算法的设计较为复杂,再次,
算法要维护一个待处理节点活节点表,并且需要在活节点表中快速查找取得极值的节点,等等,这都需要较大的存储空间,在最坏情况下,分支限界法需要的空间复杂性是指数阶
