1.候选集合C:为了构造问题的解决方案,有一个候选集合C作为问题的可能解,即问题的最终解均取自于候选集合C,例如在找零钱问题中,各种面值的货币构成候选集合
2解集合S:随着贪心选择的进行,解集合S不断扩展,直到构成一个满足问题的完整解,例如在找零钱问题中,已付出的货币构成解集合
3.可行解函数:检查解集合S是否构成问题的一个可行解,例如,在找零钱问题中,可行解函数时已付出的货币金额恰好等于应找零钱
4.选择函数:即贪心策略,它指出哪个候选对象最有希望构成问题的解,选择函数通常和目标函数有关,例如在找零钱问题中,贪心策略就是在候选集合中选择面值最大的货币
5.约束函数:检查解集合中加入一个候选对象是否满足约束条件,例如在找零钱问题中,约束函数是每一步选择的货币和已付出的货币相加不超过应找零钱
贪心算法一般框架:
 Greedy(C) //C是问题的输入集合即候选集合
 {
   S={};//初始解集合为空集
   while(not solution(S)){//集合S没有构成问题的一个可行解
      x=select(C);//在候选集合C中做贪心选择
      if constraint(S,x)//判断集合S中加入x后是否满足约束条件
        S=S+{x};
        C=C-{x};
   }
   return S;
 }
 
 贪心算法的基本要素:
 1.贪心选择性质
  所谓贪心选择性质是指所求问题的整体最优解可以通过一系列局部最后的选择,即贪心选择来达到,通常以自顶向下的方式进行,以迭代的方式作出相继的贪心选择
 2.最优子结构 
 
 自我理解:
   就是每次都选择最好的方案,具体解时,一定要把策略先排序一下在再进行思考