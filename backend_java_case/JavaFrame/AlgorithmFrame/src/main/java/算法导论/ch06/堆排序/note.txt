  堆排序的时间复杂度是O(n*lgn),不同于归并排序的是堆排序同样具有空间原址性:
 任何时候只需要常数个额外的元素空间存储临时数据,因此堆排序使集合了我们目前已经
 讨论的两种算法优点的一种排序算法(归并,插入)
 堆排序引入了堆的数据结构来进行信息管理,堆不仅用在堆排序中,也可以构造优先队列
    概念:
    堆(二叉)是一个数组,可以被看成一个近似的完全二叉树,树上的每一个节点对应数组的一个元素,
除了最底层外,该树时完全充满的,而且是从左向右填充,那么狠显然对于一个节点i,左子节点是2i,
右子节点是2i+1,父节点是i/2
    最大堆:A[parent[i]] >= A[i]
    最小堆:A[parent[i]] <= A[i]
    最小堆通常用于构造优先队列
    如果把堆看成是一颗树,我们定义一个堆中的节点的高度就为该节点到叶节点最长简单路径上边的数目,
进而我们可以把堆的高度定义为根节点的高度,既然一个包含n个元素的队可以看做一颗完全二叉树,那么
该堆的高度是0(lgn),我们会发现,堆结构上的一些基本操作的运行时间至多与树的高度成正比,即时间
复杂度为O(lgn)

  对于某个节点:高度是从结点到最深叶节点的距离
                           深度是结点到root的距离
                           
优先队列:
   两种形式:最大优先队列,最小优先队列